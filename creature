#!/bin/sh
#
# 2010 Nico Schottelius (nico-creature at schottelius.org)
#
# This file is part of creature.
#
# creature is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# creature is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with creature. If not, see <http://www.gnu.org/licenses/>.
#

# Error upon expanding unset variables:
set -u

#
# Standard variables (stolen from cconf)
#
__pwd="$(pwd -P)"
__mydir="${0%/*}"; __abs_mydir="$(cd "$__mydir" && pwd -P)"
__myname=${0##*/}; __abs_myname="$__abs_mydir/$__myname"

#
# where to find our configuration and temporary file
#
CREATURE_CONF="${CREATURE_CONF:-/etc/creature}"
CPOOL="${CREATURE_CONF}/pools"
CDEFAULTS="${CREATURE_CONF}/defaults"

export TMP="$(mktemp "/tmp/${__myname}.XXXXXX")"
VERSION="0.1"
RELEASE="2010-09-XX"
HALF_VERSION="creature ${VERSION}"
FULL_VERSION="creature ${VERSION} (${RELEASE})"

#
# CDATE: how we use it for naming of the archives
# DDATE: how the user should see it in our output (DISPLAY)
#
CDATE="date +%Y%m%d-%H%M"
DDATE="date +%Y-%m-%d-%H:%M:%S"
SDATE="date +%s"

COMMANDS="help pool_add pool_default version"
pCOMMANDS="$(echo ^${COMMANDS}\$ | sed 's/ /|/g')"

help_help="Show this help screen"
pool_add_help="<name> <path>: Create a new storage pool"
pool_default_help="<name>: Setup default storage pool"
version_help="Print version information"


#
# catch signals (FIXME: not needed currently - remove or reuse)
#
#trap "rm -f \"${TMP}\"" 1 2 15


# Write message, prefixed by scriptname
creature_msg()
{
   echo "${__myname}: $@"
}

creature_errormsg()
{
   creature_msg "$@"
   exit 1
}

creature_cmderrormsg()
{
   creature_msg "${cmd}: $@"
   exit 1
}

# argument(s) should not be empty
creature_notempty()
{
   errormsg="$1"; shift

   while [ "$#" -gt 0 ]; do
      if [ "$1" ]; then
         shift
      else
         creature_errormsg "$errormsg"
      fi
   done
}

# read a file with error handling
creature_file_read()
{
   creature_file="$1"; shift

   cat "${creature_file}" || creature_errormsg "Cannot read file ${creature_file}"

}

# Require some command line parameters and allow optional parameters
# -atleast: have at least the given number of arguments, but allow more to be present
# -exact: have exactly the given number of arguments
# -optional: allow arguments to be missing
# -skip: skip previously found arguments
creature_args()
{
   count=0
   arglist=""
   creature_args_exact="exact"
   creature_args_skip="1"

   # get argument list
   while [ "$#" -gt 0 ]; do
      case "$1" in
         # Only allow exact number of arguments (normally allow more)
         -atleast)
            creature_args_exact="atleast"
            shift
         ;;
         -optional)
            creature_args_exact="optional"
            shift
         ;;
         # Skip previously found parameters
         -skip)
            creature_args_skip="$(($creature_args_skip+$creature_args_next))"
            shift
         ;;
         -*)
            creature_errormsg "Unknown creature argument"
            shift
         ;;
         *)
            break
         ;;
      esac
   done

   # get argument list
   while [ "$1" != "--" ]; do
      eval arg_${count}=\"$1\"
      # unset
      eval $1=""
      arglist="$arglist $1"
      shift
      count=$(($count+1))
   done
 
   # skip at the "--" or more args if -skip is specified
   shift $creature_args_skip

   # Need the exact number of arguments
   if [ "${creature_args_exact}" = "exact" -a "$#" -ne "$count" ]; then
      creature_cmderrormsg ${arglist}
   # Need at least given number of arguments
   elif [ "${creature_args_exact}" = "atleast" -a "$#" -lt "$count" ]; then
      creature_cmderrormsg ${arglist}
   fi

   # assign values
   export creature_args_next=0
   while [ "$#" -gt 0 -a "$creature_args_next" -lt "${count}" ]; do
      eval export \$arg_$creature_args_next=\"$1\"
      shift
      creature_args_next=$(($creature_args_next+1))
   done
}

help()
{
   cat << eof
${__myname}: <command> <options>

   creature manages virtual monsters

eof

   for cmd in $COMMANDS; do
      eval text=\"\$${cmd}_help\"
      echo "   ${cmd}: ${text}"
   done

   cat << eof

   This is version ${VERSION}, released on ${RELEASE}
   (the first version was written on 2010-09-02 by Nico Schottelius).

   Retrieve latest creature at http://www.nico.schottelius.org/software/creature/
eof
   exit 0
}

pool_add()
{
   creature_args name location -- "$@"

   pool_dir="${CPOOL}/${name}"

   mkdir -p "${pool_dir}"
   echo "${location}" > "${pool_dir}/location"
}

pool_default()
{
   creature_args name -- "$@"

   pool_dir="${CPOOL}/${name}"

   [ -d "${pool_dir}" ] || creature_cmderrormsg "${pool_dir} not existing" 

   echo "${name}" > "${CPOOL}/.default"
}


version()
{
   echo "${FULL_VERSION}"
   exit 0
}

# "Main"
[ "$#" -gt 0 ] || help
cmd="$1"


#
# Check for configuraton directory
#
[ -d "${CREATURE_CONF}" ] || _exit_err "No Configuration found in " \
   "\"${CREATURE_CONF}\" (\$CREATURE_CONF), try creature init"

echo $pCOMMANDS

if (echo "$cmd" | grep -qE "$pCOMMANDS"); then
   echo jep
else
   help
fi

# no code beyond here is useful so far
exit 0

#
# Functions
#

# time displaying echo
_techo()
{
   echo "$(${DDATE}): $@"
}

# exit on error
_exit_err()
{
   _techo "$@"
   rm -f "${TMP}"
   exit 1
}

add_name()
{
   awk "{ print \"[${name}] \" \$0 }"
}
